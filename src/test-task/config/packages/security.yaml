security:
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'

    role_hierarchy:
                ROLE_ADMIN: [ROLE_USER]

    providers:
        my_in_memory_users:
            memory:
                users:
                    # Static tokens, could create new AuthController to give user new token on successful auth
                    # With static tokens users can't generate new tokens for themself
                    admin: { password: $2y$13$0XshcwRE1IYhb.qinHGsXesMXpQsrOtBL/hMU4eaRKlFJD5dJyypu, roles: [ 'ROLE_ADMIN' ] }
                    user: { password: $2y$13$pJ2VwdAS7NfFTxqDfyqc3uMfvYZbojD3K1av8vOwIK1m5YlBlPnTi, roles: [ 'ROLE_USER' ] }
        app_user_provider:
            entity:
                class: App\Entity\User
                property: id

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        login:
            pattern: ^/api/login
            stateless: true
            json_login:
                provider: my_in_memory_users
                username_path: login
                password_path: pass
                check_path: /api/login_check
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
        api:
            pattern:   ^/v1/api
            stateless: true
            provider: app_user_provider
            jwt: ~
    access_control:
        - { path: ^/api/login, roles: PUBLIC_ACCESS }
        - { path: ^/v1/api, roles: IS_AUTHENTICATED_FULLY }

when@test:
    security:
        password_hashers:
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
            App\Entity\User:
                algorithm: auto
